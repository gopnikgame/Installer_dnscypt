#!/bin/bash

# Подгрузка общих функций
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source "${SCRIPT_DIR}/lib/common.sh"

# Description:
# Полная установка DNSCrypt-proxy с автоматической настройкой для различных дистрибутивов Linux.
# Поддерживает Debian, Ubuntu, CentOS, Fedora и другие системы на базе systemd.

# Константы
DNSCRYPT_USER="_dnscrypt-proxy"
CONFIG_DIR="/etc/dnscrypt-proxy"
CONFIG_FILE="${CONFIG_DIR}/dnscrypt-proxy.toml"
SERVICE_NAME="dnscrypt-proxy"
EXAMPLE_CONFIG_URL="https://raw.githubusercontent.com/DNSCrypt/dnscrypt-proxy/master/dnscrypt-proxy/example-dnscrypt-proxy.toml"

# Функции

# Определение дистрибутива
detect_distro() {
    if [[ -f /etc/debian_version ]]; then
        echo "debian"
    elif [[ -f /etc/redhat-release ]]; then
        echo "redhat"
    elif [[ -f /etc/arch-release ]]; then
        echo "arch"
    else
        log "ERROR" "Неподдерживаемый дистрибутив Linux"
        return 1
    fi
}

# Установка для Debian/Ubuntu
install_debian() {
    log "INFO" "Установка для Debian/Ubuntu"
    
    if ! apt-get update; then
        log "ERROR" "Ошибка обновления списка пакетов"
        return 1
    fi
    
    if ! apt-get install -y dnscrypt-proxy; then
        log "ERROR" "Ошибка установки пакета dnscrypt-proxy"
        return 1
    fi
    
    return 0
}

# Установка для CentOS/RHEL/Fedora
install_redhat() {
    log "INFO" "Установка для CentOS/RHEL/Fedora"
    
    if ! yum install -y epel-release; then
        log "ERROR" "Ошибка добавления репозитория EPEL"
        return 1
    fi
    
    if ! yum install -y dnscrypt-proxy; then
        log "ERROR" "Ошибка установки пакета dnscrypt-proxy"
        return 1
    fi
    
    return 0
}

# Настройка конфигурации
configure_dnscrypt() {
    log "INFO" "Настройка конфигурации DNSCrypt"
    
    # Создание директории конфигурации
    mkdir -p "$CONFIG_DIR"
    
    # Создание резервной копии, если файл уже существует
    if [[ -f "$CONFIG_FILE" ]]; then
        backup_config "$CONFIG_FILE" "dnscrypt-proxy"
    fi
    
    # Загрузка примера конфигурации
    log "INFO" "Загрузка примера конфигурации"
    if ! wget -q -O "${CONFIG_FILE}.tmp" "$EXAMPLE_CONFIG_URL"; then
        log "ERROR" "Ошибка загрузки примера конфигурации"
        return 1
    fi
    
    # Базовые настройки
    log "INFO" "Применение базовых настроек"
    sed -i "s/^listen_addresses = .*/listen_addresses = ['127.0.0.1:53']/" "${CONFIG_FILE}.tmp"
    sed -i "s/^server_names = .*/server_names = ['cloudflare', 'google']/" "${CONFIG_FILE}.tmp"
    sed -i "s/^require_dnssec = .*/require_dnssec = true/" "${CONFIG_FILE}.tmp"
    
    # Перемещаем временный файл в основной
    mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"
    
    # Установка прав
    chown -R "${DNSCRYPT_USER}:${DNSCRYPT_USER}" "$CONFIG_DIR"
    chmod 750 "$CONFIG_DIR"
    
    log "SUCCESS" "Конфигурация успешно настроена"
    return 0
}

# Настройка systemd-resolved
configure_resolved() {
    if ! command -v resolvectl >/dev/null 2>&1; then
        log "INFO" "systemd-resolved не обнаружен, пропускаем настройку"
        return 0
    fi
    
    log "INFO" "Настройка systemd-resolved"
    
    mkdir -p /etc/systemd/resolved.conf.d
    cat > /etc/systemd/resolved.conf.d/dnscrypt.conf << EOF
[Resolve]
DNS=127.0.0.1
DNSStubListener=no
EOF
    
    # Перезапуск службы
    if ! systemctl restart systemd-resolved; then
        log "WARN" "Не удалось перезапустить systemd-resolved"
        return 1
    fi
    
    log "SUCCESS" "systemd-resolved успешно настроен"
    return 0
}

# Настройка resolv.conf
configure_resolv() {
    log "INFO" "Настройка resolv.conf"
    
    # Создание резервной копии
    if [[ -f /etc/resolv.conf ]]; then
        backup_config "/etc/resolv.conf" "resolv.conf"
    fi
    
    # Снимаем защиту от изменений
    chattr -i /etc/resolv.conf 2>/dev/null
    
    # Создаем новый resolv.conf
    cat > /etc/resolv.conf << EOF
# Generated by DNSCrypt Manager
nameserver 127.0.0.1
options edns0
EOF
    
    # Защищаем от изменений
    chattr +i /etc/resolv.conf 2>/dev/null
    
    log "SUCCESS" "resolv.conf успешно настроен"
    return 0
}

# Проверка работы
test_installation() {
    log "INFO" "Проверка работы DNSCrypt"
    
    # Даем время для запуска
    sleep 2
    
    # Проверка службы
    if ! systemctl is-active --quiet "$SERVICE_NAME"; then
        log "ERROR" "Служба DNSCrypt не запущена"
        return 1
    fi
    
    # Проверка резолвинга
    if ! dig @127.0.0.1 google.com +short +timeout=5 >/dev/null 2>&1; then
        log "ERROR" "DNSCrypt не отвечает на DNS-запросы"
        return 1
    fi
    
    log "SUCCESS" "DNSCrypt успешно установлен и работает"
    return 0
}

# Главная функция установки
install_dnscrypt() {
    print_header "УСТАНОВКА DNSCRYPT-PROXY"
    
    # Определяем дистрибутив
    distro=$(detect_distro) || return 1
    
    # Установка пакета
    case "$distro" in
        debian) install_debian ;;
        redhat) install_redhat ;;
        *) return 1 ;;
    esac || return 1
    
    # Настройка конфигурации
    configure_dnscrypt || return 1
    
    # Настройка DNS
    configure_resolved
    configure_resolv
    
    # Включение и запуск службы
    systemctl enable "$SERVICE_NAME"
    if ! restart_service "$SERVICE_NAME"; then
        return 1
    fi
    
    # Проверка работы
    test_installation || return 1
    
    # Финал
    echo -e "\n${GREEN}Установка завершена успешно!${NC}"
    echo -e "Для проверки выполните: ${YELLOW}dig @127.0.0.1 google.com${NC}"
    echo -e "Для изменения настроек используйте DNSCrypt Manager"
    
    return 0
}

# Вызов главной функции
if ! install_dnscrypt; then
    log "ERROR" "Установка DNSCrypt завершилась с ошибками"
    exit 1
fi

exit 0